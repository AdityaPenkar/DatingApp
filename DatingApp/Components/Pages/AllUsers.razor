@page "/Admin/Users"
@inject NavigationManager Navigation
@using DatingApp.Data
@using DatingAppFSDProject.Services
@using DatingAppFSDProject.Domain
   @using Microsoft.AspNetCore.Identity
   @using Microsoft.EntityFrameworkCore
   @inject UserManager<DatingAppUser> UserManager
   @inject DatingAppContext _context
@inject IServiceScopeFactory ServiceScopeFactory
@rendermode InteractiveServer

<PageTitle>Admin Settings</PageTitle>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
</head>

<div class="admin-settings-container">
    <h2>Manage Users</h2>

    <div class="delete-all-container">
        <button class="admin-delete-all-btn" @onclick="SoftDeleteAllUsers">
            <i class="bi bi-trash-fill"></i> Delete All Users
        </button>
    </div>

    <div class="admin-users-grid">
        @foreach (var user in Users)
        {
            <div class="admin-user-card">
                <img src="@($"/Uploads/Images/{user.ProfileImageUrl}")" alt="Profile Image" class="admin-profile-img">
                <div class="admin-user-info">
                    <h3>@user.FirstName @user.LastName</h3>
                    <p><i class="bi bi-gender-@user.Gender.ToLower()"></i> @user.Gender</p>
                    <p>@user.Bio</p>
                </div>
                <button class="admin-delete-btn" @onclick="() => SoftDeleteUser(user.UserId)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        }
    </div>
</div>


@code {
    private List<UserProfile> Users { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        var users = await UserManager.Users.Include(s => s.Profile).ToListAsync(); // Fetch all users
        Users = users.Where(s => s.Profile.Role != "Admin" && s.isDeleted == false).Select(
        u => new UserProfile
            {
                UserId = u.Id,
                FirstName = u.FirstName,
                LastName = u.LastName,
                Email = u.Email,
                Gender = u.Gender,
                ProfileImageUrl = u.Profile.ProfileImageUrl,
                Bio = u.Profile.Bio,
                Role = u.Profile.Role,
                ProfileId = u.Profile.Id
            }
        ).ToList();
    }
    private async Task SoftDeleteUser(string userId)
    {
        var user = Users.FirstOrDefault(s => s.UserId == userId);
        var editUser = await UserManager.Users.FirstOrDefaultAsync(s => s.Id == user.UserId);
        if (user != null)
        {
            editUser.isDeleted = true;
            var result = UserManager.UpdateAsync(editUser); // Remove from the db
            Users.Remove(user); // Remove from the list
            StateHasChanged();

        }
    }

    public async Task SoftDeleteAllUsers()
    {
        if (Users.Count > 0)
        {
            foreach (var user in Users.ToList()) // ToList() prevents modification during iteration
            {
                var editUser = await UserManager.Users.FirstOrDefaultAsync(s => s.Id == user.UserId);
                if (editUser != null)
                {
                    editUser.isDeleted = true;
                    await UserManager.UpdateAsync(editUser); // Await update
                }
            }
            Users.Clear();
            StateHasChanged();
        }
    }
    public class UserProfile
    {
        public string UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Gender { get; set; }
        public string ProfileImageUrl { get; set; }
        public string Bio { get; set; }
        public string Interest { get; set; }
        public string Role { get; set; }
        public int? ProfileId { get; set; }
    }
}
