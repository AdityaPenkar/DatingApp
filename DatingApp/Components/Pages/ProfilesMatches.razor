@page "/profilesMatches"
@inject NavigationManager Navigation
@using DatingApp.Data
@using DatingAppFSDProject.Services
@using DatingAppFSDProject.Domain
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<DatingAppUser> UserManager
@inject ILogger<ProfilesMatches> Logger
@rendermode InteractiveServer
@inject ILocalStorageService LocalStorageService
@inject IHttpContextAccessor HttpContextAccessor
@using System.Security.Claims;
@inject DatingAppContext _context
@inject IDbContextFactory<DatingApp.Data.DatingAppContext> DbFactory
@inject IServiceScopeFactory ServiceScopeFactory

<PageTitle>Profiles</PageTitle>
<div class="profile-container">
    @if (ProfilesList.Count > 0 && CurrentProfileIndex < ProfilesList.Count)
    {
        <div class="profile-card" @onpointerdown="StartSwipe" @onpointermove="OnSwipe" @onpointerup="EndSwipe">
            <img src="@ProfilesList[CurrentProfileIndex].ImageUrl" alt="Profile Image">
            <h2>@ProfilesList[CurrentProfileIndex].Name, @ProfilesList[CurrentProfileIndex].Age</h2>
            <p>@ProfilesList[CurrentProfileIndex].Bio</p>
            <p class="interest-p"><strong>Interest:</strong> @ProfilesList[CurrentProfileIndex].Interest</p>
            <p>@value</p>
        </div>
        <div class="buttons">
            <button class="report-btn" @onclick="() => ShowReportBox()">📝 Report</button>
            <button class="reject-btn" @onclick="RejectProfile">❌ Skip</button>
            <button class="like-btn" @onclick="LikeProfile" disabled="@(isLoading || IsRequestSent(ProfilesList[CurrentProfileIndex].Email))">
                @if (isLoading)
                {
                    <span>⏳ Sending...</span>
                }
                else if (IsRequestSent(ProfilesList[CurrentProfileIndex].Email))
                {
                    <span>✅ Sent</span>
                }
                else
                {
                    <span>❤️ Like</span>
                }
            </button>
        </div>
    }
    else
    {
        <p>No more profiles to show.</p>
    }
</div>

@if (isReporting)
{
    <div class="report-box">
        <label for="report-reason">Select a reason for reporting this user:</label>
        <select id="report-reason" @bind="selectedReason">
            <option value="">Please select a reason</option>
            @foreach (var reason in predefinedReasons)
            {
                <option value="@reason">@reason</option>
            }
        </select>
        <button @onclick="SubmitReport">Submit Report</button>
        <button @onclick="CancelReport">Cancel</button>
    </div>
}

@code {
    private List<Profile> ProfilesList = new();
    private int CurrentProfileIndex = 0;
    private double SwipeStartX;
    private double SwipeEndX;
    private string value = "";
    private bool isLoading = false;
    private bool isReporting = false;
    private string selectedReason = ""; // Store the selected reason
    private DatingAppUser currentUser { get; set; }

    private List<string> predefinedReasons = new List<string>
    {
        "Inappropriate Behavior",
        "Spam or Scams",
        "Fake Profile",
        "Harassment",
        "Other"
    };

    protected override async Task OnInitializedAsync()
    {
        string email = "";
        if (HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            email = HttpContextAccessor.HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? "Unknown";
        }

        currentUser = await UserManager.Users
            .Include(u => u.Profile)
            .FirstOrDefaultAsync(x => x.Email == email);

        if (currentUser == null || currentUser.Profile == null)
        {
            return;
        }

        string userGender = currentUser.Gender; // Extract Gender from DatingAppUser
        string userInterest = currentUser.Profile.Interest; // Interest comes from Profile

        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();

            var userProfile = await dbContext.Profile.FirstOrDefaultAsync(p => p.UId == currentUser.Id);
            var skippedUserIds = userProfile?.SkippedProfiles?.Split(',').ToList() ?? new List<string>();

            ProfilesList = await UserManager.Users
                .Include(u => u.Profile)
                .Where(u => u.Email != email &&
                            u.Profile.Role != "Admin" &&
                            u.isDeleted == false &&
                            !skippedUserIds.Contains(u.Id) &&
                            (
                                (userInterest == "Male" && u.Gender == "Male" &&
                                  (u.Profile.Interest == userGender)) ||
                                (userInterest == "Female" && u.Gender == "Female" &&
                                  (u.Profile.Interest == userGender )) ||
                                ((userInterest == "All" || string.IsNullOrEmpty(userInterest)) &&
                                  (u.Profile.Interest == userGender ))
                            ))
                .Select(user => new Profile 
                    {
                        Id = user.Id,
                        Name = user.FirstName + " " + user.LastName,
                        Bio = user.Profile.Bio,
                        ImageUrl = $"/Uploads/Images/{user.Profile.ProfileImageUrl}",
                        Email = user.Email,
                        Interest = user.Profile.Interest,
                        Age = user.DateOfBirth.HasValue
                    ? (DateTime.Now.Year - user.DateOfBirth.Value.Year)
                      - (DateTime.Now.DayOfYear < user.DateOfBirth.Value.DayOfYear ? 1 : 0)
                    : 0
                    })
                .ToListAsync();
        }
    }

    private int CalculateAge(DateTime? birthDate)
    {
        if (!birthDate.HasValue)
            return 0; // Default if DOB is not provided

        var today = DateTime.Today;
        var age = today.Year - birthDate.Value.Year;

        if (birthDate.Value.Date > today.AddYears(-age))
            age--; // Adjust if birthday hasn't occurred yet this year

        return age;
    }

    private void StartSwipe(PointerEventArgs e) => SwipeStartX = e.ClientX;
    private void OnSwipe(PointerEventArgs e) => SwipeEndX = e.ClientX;

    private void EndSwipe()
    {
        if (SwipeEndX - SwipeStartX > 50) LikeProfile();  // Swipe Right
        else if (SwipeStartX - SwipeEndX > 50) RejectProfile();  // Swipe Left
    }

    private async Task RejectProfile()
    {
        if (CurrentProfileIndex < ProfilesList.Count)
        {
            var skippedUser = ProfilesList[CurrentProfileIndex];

            if (skippedUser != null)
            {
                try
                {
                    using (var scope = ServiceScopeFactory.CreateScope())
                    {
                        var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();

                        // Fetch the current user's profile
                        var userProfile = await dbContext.Profile.FirstOrDefaultAsync(p => p.UId == currentUser.Id);

                        if (userProfile != null)
                        {
                            // Append the skipped user ID if not already present
                            var skippedList = userProfile.SkippedProfiles?.Split(',').ToList() ?? new List<string>();

                            if (!skippedList.Contains(skippedUser.Id))
                            {
                                skippedList.Add(skippedUser.Id);
                                userProfile.SkippedProfiles = string.Join(",", skippedList);

                                // Save the updated profile
                                await dbContext.SaveChangesAsync();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError($"Error saving skipped profile: {ex.Message}");
                }
            }

            // Move to next profile
            CurrentProfileIndex++;
        }
    }


    private List<string> SentRequests = new();

    private void ShowReportBox()
    {
        isReporting = true;
        Console.WriteLine("Report box is shown!");
    }

    private void CancelReport()
    {
        isReporting = false;
        selectedReason = "";
    }

    private async Task SubmitReport()
    {
        if (string.IsNullOrWhiteSpace(selectedReason))
        {
            Logger.LogInformation("Please select a reason for reporting the user.");
            return;
        }

        try
        {
            var reportedUser = ProfilesList[CurrentProfileIndex];
            var senderId = currentUser.Id;
            var receiverId = reportedUser.Id;

            var newReport = new Report
                {
                    Reason = selectedReason,
                    DateTimeReported = DateTime.Now,
                    SenderId = senderId,
                    RecieverId = receiverId,
                    Status = "Pending"  // Status can be updated as needed
                };

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();
                dbContext.Report.Add(newReport);
                await dbContext.SaveChangesAsync();
            }

            // Reset report selection
            isReporting = false;
            selectedReason = "";
            Logger.LogInformation("Report submitted successfully.");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error submitting report: {ex.Message}");
        }
    }

    private async Task LikeProfile()
    {
        Logger.LogInformation("User like in.");

        if (CurrentProfileIndex >= ProfilesList.Count || isLoading || IsRequestSent(ProfilesList[CurrentProfileIndex].Email))
            return;

        isLoading = true;
        try
        {
            var receiver = ProfilesList[CurrentProfileIndex];
            if (receiver == null) return;

            var senderId = currentUser.Id;
            var receiverId = receiver.Id;

            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();

                var existingRequest = await dbContext.ConnectionRequests
                                                     .FirstOrDefaultAsync(r => r.SenderId == senderId && r.ReceiverId == receiverId);

                if (existingRequest == null)
                {
                    var newRequest = new ConnectionRequest
                        {
                            SenderId = senderId,
                            ReceiverId = receiverId,
                            Status = RequestStatus.Default
                        };

                    dbContext.ConnectionRequests.Add(newRequest);
                    await dbContext.SaveChangesAsync();
                    SentRequests.Add(receiver.Email);
                    value = newRequest.Id.ToString();
                    Console.WriteLine("Saved request to DB.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            CurrentProfileIndex++;
            Console.WriteLine("Saved request to DB1.");
        }
    }

    private bool IsRequestSent(string receiverEmail)
    {
        var receiver = UserManager.Users.FirstOrDefault(u => u.Email == receiverEmail);

        if (receiver == null) return false;
        using var context = DbFactory.CreateDbContext();

        var result = context.ConnectionRequests.Any(r => (r.SenderId == currentUser.Id && r.ReceiverId == receiver.Id) || (r.SenderId == receiver.Id && r.ReceiverId == currentUser.Id));
        return result;
    }

    public class Profile
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Bio { get; set; }
        public string ImageUrl { get; set; }
        public string Email { get; set; }
        public string Interest { get; set; }
        public int Age { get; set; }
        
    }
}

