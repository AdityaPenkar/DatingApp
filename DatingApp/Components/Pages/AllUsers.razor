@page "/Admin/Users"
@inject NavigationManager Navigation
@using DatingApp.Data
@using DatingAppFSDProject.Services
@using DatingAppFSDProject.Domain
   @using Microsoft.AspNetCore.Identity
   @using Microsoft.EntityFrameworkCore
   @inject UserManager<DatingAppUser> UserManager
   @inject DatingAppContext _context
@inject IServiceScopeFactory ServiceScopeFactory
@rendermode InteractiveServer

<PageTitle>Admin Settings</PageTitle>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
</head>

<div class="admin-settings-container">
    <h2>Manage Users</h2>

    <div class="delete-all-container">
        <button class="admin-delete-all-btn" @onclick="SoftDeleteAllUsers">
            <i class="bi bi-trash-fill"></i> Delete All Users
        </button>
    </div>

    <div class="admin-users-grid">
        @foreach (var user in Users)
        {
            <div class="admin-user-card">
                <img src="@($"/Uploads/Images/{user.ProfileImageUrl}")" alt="Profile Image" class="admin-profile-img">
                <div class="admin-user-info">
                    <h3>@user.UserName</h3>
                    <p><i class="bi bi-gender-@user.Gender.ToLower()"></i> @user.Gender</p>
                    <p>@user.Bio</p>
                </div>
                <button class="admin-delete-btn" @onclick="() => SoftDeleteUser(user.Id)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        }
    </div>
</div>


@code {
    private List<DatingAppUser> Users { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var users = await UserManager.Users.ToListAsync(); // Fetch all users

        Users = users.Where(s => s.Role != "Admin" && s.isDeleted == false).ToList();
    }

    private async Task DeleteUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            await UserManager.DeleteAsync(user);
            Users.Remove(user);
            StateHasChanged();
        }
    }
    public async Task SoftDeleteUser(string userId)
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();

            // Find the user by ID
            var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);

            if (user != null)
            {
                user.isDeleted = true; // Set isDeleted flag to true

                dbContext.Update(user);
                Users.Remove(user);
                await dbContext.SaveChangesAsync();
            }
        }
        StateHasChanged();
    }

    private async Task DeleteAllUsers()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();
                var usersToDelete = dbContext.Users.Where(s => s.Role != "Admin").ToList();
                if (usersToDelete.Count > 0)
                {
                    foreach (var item in usersToDelete)
                    {
                        await UserManager.DeleteAsync(item);
                        Users.Remove(item);
                        // await dbContext.SaveChangesAsync();
                    }
                    // dbContext.Users.RemoveRange(usersToDelete);
                    // await dbContext.SaveChangesAsync();
                }
            }
            Users.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {

            throw;
        }

    }
    public async Task SoftDeleteAllUsers()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<DatingAppContext>();

            // Get all users who are not already marked as deleted
            var users = await dbContext.Users.Where(u => u.isDeleted != true).ToListAsync();

            foreach (var user in users)
            {
                user.isDeleted = true; // Set isDeleted flag to true for each user
            }

            dbContext.UpdateRange(users);
            await dbContext.SaveChangesAsync();
        }
        Users.Clear();
        StateHasChanged();
    }

}
